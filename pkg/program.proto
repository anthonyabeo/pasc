syntax = "proto3";

package Pasc;
option go_package = "pkg/codegen/serializer";

enum TokenKind {
    PROGRAM = 0;
    ASSIGN = 1;
    IDENTIFIER = 2;
    UINTLIT = 3;
    PROCEDURE = 4;
    LESS = 5;
    GREAT = 6;
    IF = 7;
    TO = 8;
    DOWN_TO = 9;
} 

//////////////////////////////////
//  PROGRAM
//////////////////////////////////
message Program {
    TokenKind kind = 1;
    string name = 2;
    repeated string params = 3; 
    Block block = 4;
}

message Block {
    repeated VarDeclaration varDecl = 1;
    repeated Statement stmts = 2;
    repeated Callable callables = 3;
}


message Callable {
    enum CallKind {
        Func = 0;
        Proc = 1;
    }

    CallKind kind = 1;
    oneof call {
        FuncDeclaration funcDecl = 2;
        ProcDeclaration procDecl = 3;
    }
}

message FormalParameter {
    enum FPKind {
        FuncHead = 0;
        ProcHead = 1;
        VarParam = 2;
        ValueParam = 3;
    }

    FPKind kind = 1;
    oneof fp {
        FuncHeading fHead = 2;
        ProcHeading pHead = 3;
        VariableParam vParam = 4;
        ValueParam valParam = 5;
    }
}

message VariableParam {
    repeated string names = 1;
    Type type = 2;
}

message ValueParam {
    repeated string names = 1;
    Type type = 2;
}

message FuncHeading {
    string name = 1;
    repeated FormalParameter params = 2;
    Type returnType = 3;
}

message ProcHeading {
    string name = 1;
    repeated FormalParameter params = 2;
}

//////////////////////////////////
//  DECLARATIONS
//////////////////////////////////
message FuncDeclaration {
    FuncHeading funcHeading = 1;
    Block blk = 2;
    string dir = 3;
}

message ProcDeclaration {
    ProcHeading procHead = 1;
    Block blk = 2;
    string dir = 3;
}

message VarDeclaration {
    Expression name = 1;
    Type type = 2;
}

//////////////////////////////////
//  STATEMENTS
//////////////////////////////////
message ProcedureStatement {
    enum PSKind {
        wln = 0;
        write = 1;
        read = 2;
        readLn = 3;
        procStmt = 4;
    }

    message WriteLn {
        string name = 1;
        Expression file = 2;
        repeated Expression params = 3;
    }

    message Write {

    }

    message Read {

    }

    message ReadLn {

    }

    message ProcStmt {
        Expression name = 1;
        repeated Expression params = 2;
    }

    PSKind kind = 1;
    oneof stmt {
        Write wrt = 2;
        WriteLn wrtLn = 3;
        Read rd = 4;
        ReadLn rdLn = 5;
        ProcStmt ps = 6;
    }
}

message AssignStatement {
    Expression variable = 1;
    Expression value = 2;
}

message IfStatement {
    Expression cond = 1;
    Statement truePath = 2;
    Statement elsePath = 3;
}

message ReturnStatement {
    Expression value = 1;
}

message WhileStatement {
    Expression cond = 1;
    Statement body = 2;
}

message CompoundStatement {
    repeated Statement stmts = 1;
}

message RepeatStatement {
    repeated Statement stmts = 1;
    Expression cond = 2;
}

message ForStatement {
    Expression ctlVar = 1;
    Expression initValue = 2;
    Expression finalValue = 3;
    Statement body = 4;
    TokenKind dir = 5;
}

message Statement {
    enum StmtKind {
        if = 0;
        assign = 1;
        procedure = 2;
        return = 3;
        while = 4;
        compound = 5;
        repeat = 6;
        for = 7;
    }

    StmtKind kind = 1;
    oneof stmt {
        AssignStatement assignStmt = 2;
        ProcedureStatement procStmt = 3;
        IfStatement ifStmt = 4;
        ReturnStatement retStmt = 5;
        WhileStatement whileStmt = 6;
        CompoundStatement cmpdStmt = 7;
        RepeatStatement rptStmt = 8;
        ForStatement forStmt = 9;
    }
}

//////////////////////////////////
//  EXPRESSIONS
//////////////////////////////////
message Identifier {
    enum IDKind {
        EntireVar = 0;
        IdxVar = 1;
        Field = 2;
    }

    message Variable {
        string name = 1;
    }

    message IndexedVariable {

    }

    message FieldDesignator {

    }

    IDKind kind = 1;
    oneof value {
        Variable var = 2;
        IndexedVariable iv = 3;
        FieldDesignator fld = 4;
    }
}

message Expression {
    enum ExprKind {
        UInt = 0;
        Bool = 1;
        Ident = 2;
        BinExpr = 3;
        WriteParam = 4;
        FCall = 5;
    }

    ExprKind kind = 1;
    oneof expr {
        Identifier id = 2;
        UIntLiteral uint = 3;
        BinaryExpr be = 4;
        WriteParameter wp = 5;
        FuncCall fc = 6;
    }
}

message WriteParameter {
    Expression e = 1;
    Expression totalWidth = 2;
    Expression fracDigits = 3;
}

message BinaryExpr {
   Expression left = 1;
   Expression right = 2;
   Operator op = 3;
}


message UIntLiteral {
    uint32 value = 1;
}

message FuncCall {
    Expression name = 1;
    repeated Expression args = 2;
}

//////////////////////////////////
//  TYPES
//////////////////////////////////
message Type {
    enum TypeKind {
        INTEGER = 0;
        REAL = 1;
        BOOLEAN = 2;
        CHAR = 3;
    }

    message Integer {
        string name = 1;
    }

    message Boolean {
        string name = 1;
    }

    message Real {
        string name = 1;
    }

    message Char {
        string name = 1;
    }

    TypeKind tk = 1;
    oneof type {
        Integer int = 2;
        Real real = 3;
        Boolean bool = 4;
        Char char = 5;
    }
}


//////////////////////////////////
//  OPERATORS
//////////////////////////////////
message Operator {
    enum OpKind {
        Plus = 0;
        Minus = 1;
        Div = 2;
        Sub = 3;
        Mod = 4;
        And = 5;
        Or = 6;
        In = 7;
        Equal = 8;
        Less = 9;
        Great = 10;
        GreatEqual = 11;
    }

    OpKind op = 1;
}

