syntax = "proto3";

package Pasc;
option go_package = "pkg/codegen/serializer";

enum TokenKind {
    PROGRAM = 0;
    ASSIGN = 1;
    IDENTIFIER = 2;
    UINTLIT = 3;
    PROCEDURE = 4;
    LESS = 5;
    GREAT = 6;
    IF = 7;
} 

//////////////////////////////////
//  PROGRAM
//////////////////////////////////
message Program {
    TokenKind kind = 1;
    string name = 2;
    repeated string params = 3; 
    Block block = 4;
}

message Block {
    repeated VarDeclaration varDeclrs = 1;
    repeated Statement stmts = 2;
}

message VarDeclaration {
    Expression name = 1;
    Type type = 2;
}

//////////////////////////////////
//  STATEMENTS
//////////////////////////////////
message AssignStmt {
    Expression variable = 1;
    Expression value = 2;
}

message ProcedureStmt {
    Expression name = 1;
    repeated Expression args = 2;
}

message IfStmt {
    Expression cond = 1;
    Statement truePath = 2;
    Statement elsePath = 3;
}

message Statement {
    TokenKind kind = 1;
    oneof stmt {
        AssignStmt assignStmt = 2;
        ProcedureStmt procStmt = 3;
        IfStmt ifStmt = 4;
    }
}

//////////////////////////////////
//  EXPRESSIONS
//////////////////////////////////
message Identifier {
    enum IDKind {
        EntireVar = 0;
        IdxVar = 1;
        Field = 2;
    }

    message Variable {
        string name = 1;
    }

    message IndexedVariable {

    }

    message FieldDesignator {

    }
    IDKind kind = 1;
    oneof value {
        Variable var = 2;
        IndexedVariable iv = 3;
        FieldDesignator fld = 4;
    }
}

message Expression {
    enum ExprKind {
        UInt = 0;
        Bool = 1;
        Ident = 2;
        BinExpr = 3;
    }

    ExprKind kind = 1;
    oneof expr {
        Identifier id = 2;
        UIntLiteral uint = 3;
        BinaryExpr be = 4;
    }
}

message BinaryExpr {
   Expression left = 1;
   Expression right = 2;
   Operator op = 3;
}


message UIntLiteral {
    int32 value = 1;
}

//////////////////////////////////
//  TYPES
//////////////////////////////////
enum TypeKind {
    INTEGER = 0;
    REAL = 1;
    BOOLEAN = 2;
    CHAR = 3;
}

message Type {
    TypeKind tk = 1;
    oneof type {
        Integer int = 2;
        Real real = 3;
        Boolean bool = 4;
        Char char = 5;
    }
}

message Integer {
    string name = 1;
}

message Boolean {
    string name = 1;
}

message Real {
    string name = 1;
}

message Char {
    string name = 1;
}

//////////////////////////////////
//  OPERATORS
//////////////////////////////////
message Operator {
    enum OpKind {
        Plus = 0;
        Minus = 1;
        Div = 2;
        Sub = 3;
        Mod = 4;
        And = 5;
        Or = 6;
        In = 7;
        Equal = 8;
        Less = 9;
        Great = 10;
    }

    OpKind op = 1;
}

