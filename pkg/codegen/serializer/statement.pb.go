// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proto/statement.proto

package serializer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcedureStatement_PSKind int32

const (
	ProcedureStatement_wln      ProcedureStatement_PSKind = 0
	ProcedureStatement_write    ProcedureStatement_PSKind = 1
	ProcedureStatement_read     ProcedureStatement_PSKind = 2
	ProcedureStatement_readLn   ProcedureStatement_PSKind = 3
	ProcedureStatement_procStmt ProcedureStatement_PSKind = 4
)

// Enum value maps for ProcedureStatement_PSKind.
var (
	ProcedureStatement_PSKind_name = map[int32]string{
		0: "wln",
		1: "write",
		2: "read",
		3: "readLn",
		4: "procStmt",
	}
	ProcedureStatement_PSKind_value = map[string]int32{
		"wln":      0,
		"write":    1,
		"read":     2,
		"readLn":   3,
		"procStmt": 4,
	}
)

func (x ProcedureStatement_PSKind) Enum() *ProcedureStatement_PSKind {
	p := new(ProcedureStatement_PSKind)
	*p = x
	return p
}

func (x ProcedureStatement_PSKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureStatement_PSKind) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_statement_proto_enumTypes[0].Descriptor()
}

func (ProcedureStatement_PSKind) Type() protoreflect.EnumType {
	return &file_proto_statement_proto_enumTypes[0]
}

func (x ProcedureStatement_PSKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureStatement_PSKind.Descriptor instead.
func (ProcedureStatement_PSKind) EnumDescriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 0}
}

type Statement_StmtKind int32

const (
	Statement_if        Statement_StmtKind = 0
	Statement_assign    Statement_StmtKind = 1
	Statement_procedure Statement_StmtKind = 2
	Statement_return    Statement_StmtKind = 3
	Statement_while     Statement_StmtKind = 4
	Statement_compound  Statement_StmtKind = 5
	Statement_repeat    Statement_StmtKind = 6
	Statement_for       Statement_StmtKind = 7
	Statement_case      Statement_StmtKind = 8
	Statement_goto      Statement_StmtKind = 9
)

// Enum value maps for Statement_StmtKind.
var (
	Statement_StmtKind_name = map[int32]string{
		0: "if",
		1: "assign",
		2: "procedure",
		3: "return",
		4: "while",
		5: "compound",
		6: "repeat",
		7: "for",
		8: "case",
		9: "goto",
	}
	Statement_StmtKind_value = map[string]int32{
		"if":        0,
		"assign":    1,
		"procedure": 2,
		"return":    3,
		"while":     4,
		"compound":  5,
		"repeat":    6,
		"for":       7,
		"case":      8,
		"goto":      9,
	}
)

func (x Statement_StmtKind) Enum() *Statement_StmtKind {
	p := new(Statement_StmtKind)
	*p = x
	return p
}

func (x Statement_StmtKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Statement_StmtKind) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_statement_proto_enumTypes[1].Descriptor()
}

func (Statement_StmtKind) Type() protoreflect.EnumType {
	return &file_proto_statement_proto_enumTypes[1]
}

func (x Statement_StmtKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Statement_StmtKind.Descriptor instead.
func (Statement_StmtKind) EnumDescriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{10, 0}
}

type ProcedureStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind ProcedureStatement_PSKind `protobuf:"varint,1,opt,name=kind,proto3,enum=Pasc.ProcedureStatement_PSKind" json:"kind,omitempty"`
	// Types that are assignable to Stmt:
	//
	//	*ProcedureStatement_Wrt
	//	*ProcedureStatement_WrtLn
	//	*ProcedureStatement_Rd
	//	*ProcedureStatement_RdLn
	//	*ProcedureStatement_Ps
	Stmt isProcedureStatement_Stmt `protobuf_oneof:"stmt"`
}

func (x *ProcedureStatement) Reset() {
	*x = ProcedureStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement) ProtoMessage() {}

func (x *ProcedureStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement.ProtoReflect.Descriptor instead.
func (*ProcedureStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0}
}

func (x *ProcedureStatement) GetKind() ProcedureStatement_PSKind {
	if x != nil {
		return x.Kind
	}
	return ProcedureStatement_wln
}

func (m *ProcedureStatement) GetStmt() isProcedureStatement_Stmt {
	if m != nil {
		return m.Stmt
	}
	return nil
}

func (x *ProcedureStatement) GetWrt() *ProcedureStatement_Write {
	if x, ok := x.GetStmt().(*ProcedureStatement_Wrt); ok {
		return x.Wrt
	}
	return nil
}

func (x *ProcedureStatement) GetWrtLn() *ProcedureStatement_WriteLn {
	if x, ok := x.GetStmt().(*ProcedureStatement_WrtLn); ok {
		return x.WrtLn
	}
	return nil
}

func (x *ProcedureStatement) GetRd() *ProcedureStatement_Read {
	if x, ok := x.GetStmt().(*ProcedureStatement_Rd); ok {
		return x.Rd
	}
	return nil
}

func (x *ProcedureStatement) GetRdLn() *ProcedureStatement_ReadLn {
	if x, ok := x.GetStmt().(*ProcedureStatement_RdLn); ok {
		return x.RdLn
	}
	return nil
}

func (x *ProcedureStatement) GetPs() *ProcedureStatement_ProcStmt {
	if x, ok := x.GetStmt().(*ProcedureStatement_Ps); ok {
		return x.Ps
	}
	return nil
}

type isProcedureStatement_Stmt interface {
	isProcedureStatement_Stmt()
}

type ProcedureStatement_Wrt struct {
	Wrt *ProcedureStatement_Write `protobuf:"bytes,2,opt,name=wrt,proto3,oneof"`
}

type ProcedureStatement_WrtLn struct {
	WrtLn *ProcedureStatement_WriteLn `protobuf:"bytes,3,opt,name=wrtLn,proto3,oneof"`
}

type ProcedureStatement_Rd struct {
	Rd *ProcedureStatement_Read `protobuf:"bytes,4,opt,name=rd,proto3,oneof"`
}

type ProcedureStatement_RdLn struct {
	RdLn *ProcedureStatement_ReadLn `protobuf:"bytes,5,opt,name=rdLn,proto3,oneof"`
}

type ProcedureStatement_Ps struct {
	Ps *ProcedureStatement_ProcStmt `protobuf:"bytes,6,opt,name=ps,proto3,oneof"`
}

func (*ProcedureStatement_Wrt) isProcedureStatement_Stmt() {}

func (*ProcedureStatement_WrtLn) isProcedureStatement_Stmt() {}

func (*ProcedureStatement_Rd) isProcedureStatement_Stmt() {}

func (*ProcedureStatement_RdLn) isProcedureStatement_Stmt() {}

func (*ProcedureStatement_Ps) isProcedureStatement_Stmt() {}

type AssignStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable *Expression `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Value    *Expression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AssignStatement) Reset() {
	*x = AssignStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignStatement) ProtoMessage() {}

func (x *AssignStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignStatement.ProtoReflect.Descriptor instead.
func (*AssignStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{1}
}

func (x *AssignStatement) GetVariable() *Expression {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *AssignStatement) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type IfStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cond     *Expression `protobuf:"bytes,1,opt,name=cond,proto3" json:"cond,omitempty"`
	TruePath *Statement  `protobuf:"bytes,2,opt,name=truePath,proto3" json:"truePath,omitempty"`
	ElsePath *Statement  `protobuf:"bytes,3,opt,name=elsePath,proto3" json:"elsePath,omitempty"`
}

func (x *IfStatement) Reset() {
	*x = IfStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfStatement) ProtoMessage() {}

func (x *IfStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfStatement.ProtoReflect.Descriptor instead.
func (*IfStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{2}
}

func (x *IfStatement) GetCond() *Expression {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *IfStatement) GetTruePath() *Statement {
	if x != nil {
		return x.TruePath
	}
	return nil
}

func (x *IfStatement) GetElsePath() *Statement {
	if x != nil {
		return x.ElsePath
	}
	return nil
}

type ReturnStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Expression `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReturnStatement) Reset() {
	*x = ReturnStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnStatement) ProtoMessage() {}

func (x *ReturnStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnStatement.ProtoReflect.Descriptor instead.
func (*ReturnStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{3}
}

func (x *ReturnStatement) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type WhileStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cond *Expression `protobuf:"bytes,1,opt,name=cond,proto3" json:"cond,omitempty"`
	Body *Statement  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *WhileStatement) Reset() {
	*x = WhileStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhileStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhileStatement) ProtoMessage() {}

func (x *WhileStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhileStatement.ProtoReflect.Descriptor instead.
func (*WhileStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{4}
}

func (x *WhileStatement) GetCond() *Expression {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *WhileStatement) GetBody() *Statement {
	if x != nil {
		return x.Body
	}
	return nil
}

type CompoundStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts []*Statement `protobuf:"bytes,1,rep,name=stmts,proto3" json:"stmts,omitempty"`
}

func (x *CompoundStatement) Reset() {
	*x = CompoundStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundStatement) ProtoMessage() {}

func (x *CompoundStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundStatement.ProtoReflect.Descriptor instead.
func (*CompoundStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{5}
}

func (x *CompoundStatement) GetStmts() []*Statement {
	if x != nil {
		return x.Stmts
	}
	return nil
}

type RepeatStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts []*Statement `protobuf:"bytes,1,rep,name=stmts,proto3" json:"stmts,omitempty"`
	Cond  *Expression  `protobuf:"bytes,2,opt,name=cond,proto3" json:"cond,omitempty"`
}

func (x *RepeatStatement) Reset() {
	*x = RepeatStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatStatement) ProtoMessage() {}

func (x *RepeatStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatStatement.ProtoReflect.Descriptor instead.
func (*RepeatStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{6}
}

func (x *RepeatStatement) GetStmts() []*Statement {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *RepeatStatement) GetCond() *Expression {
	if x != nil {
		return x.Cond
	}
	return nil
}

type ForStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlVar     *Expression `protobuf:"bytes,1,opt,name=ctlVar,proto3" json:"ctlVar,omitempty"`
	InitValue  *Expression `protobuf:"bytes,2,opt,name=initValue,proto3" json:"initValue,omitempty"`
	FinalValue *Expression `protobuf:"bytes,3,opt,name=finalValue,proto3" json:"finalValue,omitempty"`
	Body       *Statement  `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Dir        TokenKind   `protobuf:"varint,5,opt,name=dir,proto3,enum=Pasc.TokenKind" json:"dir,omitempty"`
}

func (x *ForStatement) Reset() {
	*x = ForStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForStatement) ProtoMessage() {}

func (x *ForStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForStatement.ProtoReflect.Descriptor instead.
func (*ForStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{7}
}

func (x *ForStatement) GetCtlVar() *Expression {
	if x != nil {
		return x.CtlVar
	}
	return nil
}

func (x *ForStatement) GetInitValue() *Expression {
	if x != nil {
		return x.InitValue
	}
	return nil
}

func (x *ForStatement) GetFinalValue() *Expression {
	if x != nil {
		return x.FinalValue
	}
	return nil
}

func (x *ForStatement) GetBody() *Statement {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ForStatement) GetDir() TokenKind {
	if x != nil {
		return x.Dir
	}
	return TokenKind_PROGRAM
}

type CaseStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseIndex *Expression                      `protobuf:"bytes,1,opt,name=caseIndex,proto3" json:"caseIndex,omitempty"`
	Cle       []*CaseStatement_CaseListElement `protobuf:"bytes,2,rep,name=cle,proto3" json:"cle,omitempty"`
}

func (x *CaseStatement) Reset() {
	*x = CaseStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseStatement) ProtoMessage() {}

func (x *CaseStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseStatement.ProtoReflect.Descriptor instead.
func (*CaseStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{8}
}

func (x *CaseStatement) GetCaseIndex() *Expression {
	if x != nil {
		return x.CaseIndex
	}
	return nil
}

func (x *CaseStatement) GetCle() []*CaseStatement_CaseListElement {
	if x != nil {
		return x.Cle
	}
	return nil
}

type GoToStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *GoToStatement) Reset() {
	*x = GoToStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToStatement) ProtoMessage() {}

func (x *GoToStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToStatement.ProtoReflect.Descriptor instead.
func (*GoToStatement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{9}
}

func (x *GoToStatement) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind Statement_StmtKind `protobuf:"varint,1,opt,name=kind,proto3,enum=Pasc.Statement_StmtKind" json:"kind,omitempty"`
	// Types that are assignable to Stmt:
	//
	//	*Statement_AssignStmt
	//	*Statement_ProcStmt
	//	*Statement_IfStmt
	//	*Statement_RetStmt
	//	*Statement_WhileStmt
	//	*Statement_CmpdStmt
	//	*Statement_RptStmt
	//	*Statement_ForStmt
	//	*Statement_CaseStmt
	//	*Statement_GotoStmt
	Stmt isStatement_Stmt `protobuf_oneof:"stmt"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{10}
}

func (x *Statement) GetKind() Statement_StmtKind {
	if x != nil {
		return x.Kind
	}
	return Statement_if
}

func (m *Statement) GetStmt() isStatement_Stmt {
	if m != nil {
		return m.Stmt
	}
	return nil
}

func (x *Statement) GetAssignStmt() *AssignStatement {
	if x, ok := x.GetStmt().(*Statement_AssignStmt); ok {
		return x.AssignStmt
	}
	return nil
}

func (x *Statement) GetProcStmt() *ProcedureStatement {
	if x, ok := x.GetStmt().(*Statement_ProcStmt); ok {
		return x.ProcStmt
	}
	return nil
}

func (x *Statement) GetIfStmt() *IfStatement {
	if x, ok := x.GetStmt().(*Statement_IfStmt); ok {
		return x.IfStmt
	}
	return nil
}

func (x *Statement) GetRetStmt() *ReturnStatement {
	if x, ok := x.GetStmt().(*Statement_RetStmt); ok {
		return x.RetStmt
	}
	return nil
}

func (x *Statement) GetWhileStmt() *WhileStatement {
	if x, ok := x.GetStmt().(*Statement_WhileStmt); ok {
		return x.WhileStmt
	}
	return nil
}

func (x *Statement) GetCmpdStmt() *CompoundStatement {
	if x, ok := x.GetStmt().(*Statement_CmpdStmt); ok {
		return x.CmpdStmt
	}
	return nil
}

func (x *Statement) GetRptStmt() *RepeatStatement {
	if x, ok := x.GetStmt().(*Statement_RptStmt); ok {
		return x.RptStmt
	}
	return nil
}

func (x *Statement) GetForStmt() *ForStatement {
	if x, ok := x.GetStmt().(*Statement_ForStmt); ok {
		return x.ForStmt
	}
	return nil
}

func (x *Statement) GetCaseStmt() *CaseStatement {
	if x, ok := x.GetStmt().(*Statement_CaseStmt); ok {
		return x.CaseStmt
	}
	return nil
}

func (x *Statement) GetGotoStmt() *GoToStatement {
	if x, ok := x.GetStmt().(*Statement_GotoStmt); ok {
		return x.GotoStmt
	}
	return nil
}

type isStatement_Stmt interface {
	isStatement_Stmt()
}

type Statement_AssignStmt struct {
	AssignStmt *AssignStatement `protobuf:"bytes,2,opt,name=assignStmt,proto3,oneof"`
}

type Statement_ProcStmt struct {
	ProcStmt *ProcedureStatement `protobuf:"bytes,3,opt,name=procStmt,proto3,oneof"`
}

type Statement_IfStmt struct {
	IfStmt *IfStatement `protobuf:"bytes,4,opt,name=ifStmt,proto3,oneof"`
}

type Statement_RetStmt struct {
	RetStmt *ReturnStatement `protobuf:"bytes,5,opt,name=retStmt,proto3,oneof"`
}

type Statement_WhileStmt struct {
	WhileStmt *WhileStatement `protobuf:"bytes,6,opt,name=whileStmt,proto3,oneof"`
}

type Statement_CmpdStmt struct {
	CmpdStmt *CompoundStatement `protobuf:"bytes,7,opt,name=cmpdStmt,proto3,oneof"`
}

type Statement_RptStmt struct {
	RptStmt *RepeatStatement `protobuf:"bytes,8,opt,name=rptStmt,proto3,oneof"`
}

type Statement_ForStmt struct {
	ForStmt *ForStatement `protobuf:"bytes,9,opt,name=forStmt,proto3,oneof"`
}

type Statement_CaseStmt struct {
	CaseStmt *CaseStatement `protobuf:"bytes,10,opt,name=caseStmt,proto3,oneof"`
}

type Statement_GotoStmt struct {
	GotoStmt *GoToStatement `protobuf:"bytes,11,opt,name=gotoStmt,proto3,oneof"`
}

func (*Statement_AssignStmt) isStatement_Stmt() {}

func (*Statement_ProcStmt) isStatement_Stmt() {}

func (*Statement_IfStmt) isStatement_Stmt() {}

func (*Statement_RetStmt) isStatement_Stmt() {}

func (*Statement_WhileStmt) isStatement_Stmt() {}

func (*Statement_CmpdStmt) isStatement_Stmt() {}

func (*Statement_RptStmt) isStatement_Stmt() {}

func (*Statement_ForStmt) isStatement_Stmt() {}

func (*Statement_CaseStmt) isStatement_Stmt() {}

func (*Statement_GotoStmt) isStatement_Stmt() {}

type ProcedureStatement_WriteLn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	File   *Expression   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Params []*Expression `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ProcedureStatement_WriteLn) Reset() {
	*x = ProcedureStatement_WriteLn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement_WriteLn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement_WriteLn) ProtoMessage() {}

func (x *ProcedureStatement_WriteLn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement_WriteLn.ProtoReflect.Descriptor instead.
func (*ProcedureStatement_WriteLn) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProcedureStatement_WriteLn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcedureStatement_WriteLn) GetFile() *Expression {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ProcedureStatement_WriteLn) GetParams() []*Expression {
	if x != nil {
		return x.Params
	}
	return nil
}

type ProcedureStatement_Write struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcedureStatement_Write) Reset() {
	*x = ProcedureStatement_Write{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement_Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement_Write) ProtoMessage() {}

func (x *ProcedureStatement_Write) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement_Write.ProtoReflect.Descriptor instead.
func (*ProcedureStatement_Write) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 1}
}

type ProcedureStatement_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcedureStatement_Read) Reset() {
	*x = ProcedureStatement_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement_Read) ProtoMessage() {}

func (x *ProcedureStatement_Read) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement_Read.ProtoReflect.Descriptor instead.
func (*ProcedureStatement_Read) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 2}
}

type ProcedureStatement_ReadLn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcedureStatement_ReadLn) Reset() {
	*x = ProcedureStatement_ReadLn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement_ReadLn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement_ReadLn) ProtoMessage() {}

func (x *ProcedureStatement_ReadLn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement_ReadLn.ProtoReflect.Descriptor instead.
func (*ProcedureStatement_ReadLn) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 3}
}

type ProcedureStatement_ProcStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *Expression   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params []*Expression `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ProcedureStatement_ProcStmt) Reset() {
	*x = ProcedureStatement_ProcStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatement_ProcStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatement_ProcStmt) ProtoMessage() {}

func (x *ProcedureStatement_ProcStmt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatement_ProcStmt.ProtoReflect.Descriptor instead.
func (*ProcedureStatement_ProcStmt) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ProcedureStatement_ProcStmt) GetName() *Expression {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProcedureStatement_ProcStmt) GetParams() []*Expression {
	if x != nil {
		return x.Params
	}
	return nil
}

type CaseStatement_CaseListElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constants []*Expression `protobuf:"bytes,1,rep,name=constants,proto3" json:"constants,omitempty"`
	Stmt      *Statement    `protobuf:"bytes,2,opt,name=stmt,proto3" json:"stmt,omitempty"`
}

func (x *CaseStatement_CaseListElement) Reset() {
	*x = CaseStatement_CaseListElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_statement_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseStatement_CaseListElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseStatement_CaseListElement) ProtoMessage() {}

func (x *CaseStatement_CaseListElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_statement_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseStatement_CaseListElement.ProtoReflect.Descriptor instead.
func (*CaseStatement_CaseListElement) Descriptor() ([]byte, []int) {
	return file_proto_statement_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CaseStatement_CaseListElement) GetConstants() []*Expression {
	if x != nil {
		return x.Constants
	}
	return nil
}

func (x *CaseStatement_CaseListElement) GetStmt() *Statement {
	if x != nil {
		return x.Stmt
	}
	return nil
}

var File_proto_statement_proto protoreflect.FileDescriptor

var file_proto_statement_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x50, 0x61, 0x73, 0x63, 0x1a, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x53, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x77, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x77, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x72, 0x74, 0x4c,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x77, 0x72, 0x74,
	0x4c, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x02, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x64, 0x4c, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4c, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x72, 0x64, 0x4c, 0x6e, 0x12, 0x33, 0x0a, 0x02, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x02, 0x70, 0x73, 0x1a,
	0x6d, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50,
	0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x07,
	0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x1a,
	0x08, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6e, 0x1a, 0x5a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x63, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61,
	0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x06, 0x50, 0x53, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x77, 0x6c, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x6e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x63, 0x53, 0x74, 0x6d, 0x74, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x22,
	0x67, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x49, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x74, 0x72, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x65,
	0x6c, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x50, 0x61, 0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x65, 0x6c, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73,
	0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x61, 0x73, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x3a, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xe2, 0x01, 0x0a,
	0x0c, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73,
	0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61,
	0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x61,
	0x73, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x63, 0x6c, 0x65, 0x1a, 0x66, 0x0a, 0x0f, 0x43, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x04, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x61,
	0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x73, 0x74,
	0x6d, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xc5, 0x05, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x61, 0x73, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x53, 0x74, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x63, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x66, 0x53, 0x74, 0x6d, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x49, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69, 0x66, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x61, 0x73, 0x63,
	0x2e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x63, 0x6d, 0x70, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6d, 0x70, 0x64, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x70, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x70, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x53, 0x74, 0x6d,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x6d, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x61, 0x73, 0x63, 0x2e,
	0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x6f, 0x74,
	0x6f, 0x53, 0x74, 0x6d, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x61,
	0x73, 0x63, 0x2e, 0x47, 0x6f, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x6d, 0x74, 0x22, 0x7b, 0x0a, 0x08,
	0x53, 0x74, 0x6d, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x66, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x6c, 0x65,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03,
	0x66, 0x6f, 0x72, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x10, 0x08, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x10, 0x09, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x6d,
	0x74, 0x42, 0x18, 0x5a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_statement_proto_rawDescOnce sync.Once
	file_proto_statement_proto_rawDescData = file_proto_statement_proto_rawDesc
)

func file_proto_statement_proto_rawDescGZIP() []byte {
	file_proto_statement_proto_rawDescOnce.Do(func() {
		file_proto_statement_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_statement_proto_rawDescData)
	})
	return file_proto_statement_proto_rawDescData
}

var file_proto_statement_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_statement_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_statement_proto_goTypes = []interface{}{
	(ProcedureStatement_PSKind)(0),        // 0: Pasc.ProcedureStatement.PSKind
	(Statement_StmtKind)(0),               // 1: Pasc.Statement.StmtKind
	(*ProcedureStatement)(nil),            // 2: Pasc.ProcedureStatement
	(*AssignStatement)(nil),               // 3: Pasc.AssignStatement
	(*IfStatement)(nil),                   // 4: Pasc.IfStatement
	(*ReturnStatement)(nil),               // 5: Pasc.ReturnStatement
	(*WhileStatement)(nil),                // 6: Pasc.WhileStatement
	(*CompoundStatement)(nil),             // 7: Pasc.CompoundStatement
	(*RepeatStatement)(nil),               // 8: Pasc.RepeatStatement
	(*ForStatement)(nil),                  // 9: Pasc.ForStatement
	(*CaseStatement)(nil),                 // 10: Pasc.CaseStatement
	(*GoToStatement)(nil),                 // 11: Pasc.GoToStatement
	(*Statement)(nil),                     // 12: Pasc.Statement
	(*ProcedureStatement_WriteLn)(nil),    // 13: Pasc.ProcedureStatement.WriteLn
	(*ProcedureStatement_Write)(nil),      // 14: Pasc.ProcedureStatement.Write
	(*ProcedureStatement_Read)(nil),       // 15: Pasc.ProcedureStatement.Read
	(*ProcedureStatement_ReadLn)(nil),     // 16: Pasc.ProcedureStatement.ReadLn
	(*ProcedureStatement_ProcStmt)(nil),   // 17: Pasc.ProcedureStatement.ProcStmt
	(*CaseStatement_CaseListElement)(nil), // 18: Pasc.CaseStatement.CaseListElement
	(*Expression)(nil),                    // 19: Pasc.Expression
	(TokenKind)(0),                        // 20: Pasc.TokenKind
}
var file_proto_statement_proto_depIdxs = []int32{
	0,  // 0: Pasc.ProcedureStatement.kind:type_name -> Pasc.ProcedureStatement.PSKind
	14, // 1: Pasc.ProcedureStatement.wrt:type_name -> Pasc.ProcedureStatement.Write
	13, // 2: Pasc.ProcedureStatement.wrtLn:type_name -> Pasc.ProcedureStatement.WriteLn
	15, // 3: Pasc.ProcedureStatement.rd:type_name -> Pasc.ProcedureStatement.Read
	16, // 4: Pasc.ProcedureStatement.rdLn:type_name -> Pasc.ProcedureStatement.ReadLn
	17, // 5: Pasc.ProcedureStatement.ps:type_name -> Pasc.ProcedureStatement.ProcStmt
	19, // 6: Pasc.AssignStatement.variable:type_name -> Pasc.Expression
	19, // 7: Pasc.AssignStatement.value:type_name -> Pasc.Expression
	19, // 8: Pasc.IfStatement.cond:type_name -> Pasc.Expression
	12, // 9: Pasc.IfStatement.truePath:type_name -> Pasc.Statement
	12, // 10: Pasc.IfStatement.elsePath:type_name -> Pasc.Statement
	19, // 11: Pasc.ReturnStatement.value:type_name -> Pasc.Expression
	19, // 12: Pasc.WhileStatement.cond:type_name -> Pasc.Expression
	12, // 13: Pasc.WhileStatement.body:type_name -> Pasc.Statement
	12, // 14: Pasc.CompoundStatement.stmts:type_name -> Pasc.Statement
	12, // 15: Pasc.RepeatStatement.stmts:type_name -> Pasc.Statement
	19, // 16: Pasc.RepeatStatement.cond:type_name -> Pasc.Expression
	19, // 17: Pasc.ForStatement.ctlVar:type_name -> Pasc.Expression
	19, // 18: Pasc.ForStatement.initValue:type_name -> Pasc.Expression
	19, // 19: Pasc.ForStatement.finalValue:type_name -> Pasc.Expression
	12, // 20: Pasc.ForStatement.body:type_name -> Pasc.Statement
	20, // 21: Pasc.ForStatement.dir:type_name -> Pasc.TokenKind
	19, // 22: Pasc.CaseStatement.caseIndex:type_name -> Pasc.Expression
	18, // 23: Pasc.CaseStatement.cle:type_name -> Pasc.CaseStatement.CaseListElement
	1,  // 24: Pasc.Statement.kind:type_name -> Pasc.Statement.StmtKind
	3,  // 25: Pasc.Statement.assignStmt:type_name -> Pasc.AssignStatement
	2,  // 26: Pasc.Statement.procStmt:type_name -> Pasc.ProcedureStatement
	4,  // 27: Pasc.Statement.ifStmt:type_name -> Pasc.IfStatement
	5,  // 28: Pasc.Statement.retStmt:type_name -> Pasc.ReturnStatement
	6,  // 29: Pasc.Statement.whileStmt:type_name -> Pasc.WhileStatement
	7,  // 30: Pasc.Statement.cmpdStmt:type_name -> Pasc.CompoundStatement
	8,  // 31: Pasc.Statement.rptStmt:type_name -> Pasc.RepeatStatement
	9,  // 32: Pasc.Statement.forStmt:type_name -> Pasc.ForStatement
	10, // 33: Pasc.Statement.caseStmt:type_name -> Pasc.CaseStatement
	11, // 34: Pasc.Statement.gotoStmt:type_name -> Pasc.GoToStatement
	19, // 35: Pasc.ProcedureStatement.WriteLn.file:type_name -> Pasc.Expression
	19, // 36: Pasc.ProcedureStatement.WriteLn.params:type_name -> Pasc.Expression
	19, // 37: Pasc.ProcedureStatement.ProcStmt.name:type_name -> Pasc.Expression
	19, // 38: Pasc.ProcedureStatement.ProcStmt.params:type_name -> Pasc.Expression
	19, // 39: Pasc.CaseStatement.CaseListElement.constants:type_name -> Pasc.Expression
	12, // 40: Pasc.CaseStatement.CaseListElement.stmt:type_name -> Pasc.Statement
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_proto_statement_proto_init() }
func file_proto_statement_proto_init() {
	if File_proto_statement_proto != nil {
		return
	}
	file_proto_token_proto_init()
	file_proto_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_statement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhileStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement_WriteLn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement_Write); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement_ReadLn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatement_ProcStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_statement_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseStatement_CaseListElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_statement_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProcedureStatement_Wrt)(nil),
		(*ProcedureStatement_WrtLn)(nil),
		(*ProcedureStatement_Rd)(nil),
		(*ProcedureStatement_RdLn)(nil),
		(*ProcedureStatement_Ps)(nil),
	}
	file_proto_statement_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Statement_AssignStmt)(nil),
		(*Statement_ProcStmt)(nil),
		(*Statement_IfStmt)(nil),
		(*Statement_RetStmt)(nil),
		(*Statement_WhileStmt)(nil),
		(*Statement_CmpdStmt)(nil),
		(*Statement_RptStmt)(nil),
		(*Statement_ForStmt)(nil),
		(*Statement_CaseStmt)(nil),
		(*Statement_GotoStmt)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_statement_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_statement_proto_goTypes,
		DependencyIndexes: file_proto_statement_proto_depIdxs,
		EnumInfos:         file_proto_statement_proto_enumTypes,
		MessageInfos:      file_proto_statement_proto_msgTypes,
	}.Build()
	File_proto_statement_proto = out.File
	file_proto_statement_proto_rawDesc = nil
	file_proto_statement_proto_goTypes = nil
	file_proto_statement_proto_depIdxs = nil
}
