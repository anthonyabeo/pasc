syntax = "proto3";

package Pasc;
option go_package = "pkg/codegen/serializer";

import "proto/type.proto";


message Expression {
  enum ExprKind {
    UInt = 0;
    Bool = 1;
    Var = 2;
    BinExpr = 3;
    WriteParam = 4;
    FCall = 5;
    Nil = 6;
    UReal = 7;
    UnExpr = 8;
    Str = 9;
    Rg = 10;
    IdxVar = 11;
    Field = 12;
  }

  ExprKind kind = 1;
  oneof expr {
    Variable variable = 2;
    UIntLiteral uint = 3;
    BinaryExpr be = 4;
    WriteParameter wp = 5;
    FuncCall fc = 6;
    BoolExpr bl = 7;
    NilValue nl = 8;
    URealLiteral ureal = 9;
    UnaryExpr ue = 10;
    CharString cs = 11;
    Range rng = 12;
    IndexedVariable iv = 13;
    FieldDesignator fld = 14;
  }
}

message Variable {
  string name = 1;
}

message IndexedVariable {
  string arrayVar = 1;
  repeated Expression idxExpr = 2;
}

message FieldDesignator {
  string RecordVar = 1;
  uint64 FieldSpec = 2;
}

message WriteParameter {
  Expression e = 1;
  Expression totalWidth = 2;
  Expression fracDigits = 3;
}

message BinaryExpr {
  Expression left = 1;
  Expression right = 2;
  Operator op = 3;
}


message UIntLiteral {
  uint32 value = 1;
}

message BoolExpr {
  bool value = 1;
}

message NilValue {
  string name = 1;
}

message URealLiteral {
  double value = 1;
}

message UnaryExpr {
  Operator op = 1;
  Expression operand = 2;
}

message CharString {
  string value = 1;
}

message FuncCall {
  Expression name = 1;
  repeated Expression args = 2;
  Type returnType = 3;
}

message Range {
  Expression start = 1;
  Expression end = 2;
}

//////////////////////////////////
//  OPERATORS
//////////////////////////////////
message Operator {
  enum OpKind {
    Plus = 0;
    Minus = 1;
    Div = 2;
    Mult = 3;
    Mod = 4;
    And = 5;
    Or = 6;
    In = 7;
    Equal = 8;
    Less = 9;
    Great = 10;
    GreatEqual = 11;
    LessEqual = 12;
    NotEqual = 13;
    FwdSlash = 14;
    Not = 15;
  }

  OpKind op = 1;
}