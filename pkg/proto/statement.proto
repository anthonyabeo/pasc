syntax = "proto3";

package Pasc;
option go_package = "pkg/codegen/serializer";

import "proto/token.proto";
import "proto/expression.proto";

message ProcedureStatement {
  enum PSKind {
    wln = 0;
    write = 1;
    read = 2;
    readLn = 3;
    procStmt = 4;
  }

  message WriteLn {
    string name = 1;
    Expression file = 2;
    repeated Expression params = 3;
  }

  message Write {

  }

  message Read {

  }

  message ReadLn {

  }

  message ProcStmt {
    Expression name = 1;
    repeated Expression params = 2;
  }

  PSKind kind = 1;
  oneof stmt {
    Write wrt = 2;
    WriteLn wrtLn = 3;
    Read rd = 4;
    ReadLn rdLn = 5;
    ProcStmt ps = 6;
  }
}

message AssignStatement {
  Expression variable = 1;
  Expression value = 2;
}

message IfStatement {
  Expression cond = 1;
  Statement truePath = 2;
  Statement elsePath = 3;
}

message ReturnStatement {
  Expression value = 1;
}

message WhileStatement {
  Expression cond = 1;
  Statement body = 2;
}

message CompoundStatement {
  repeated Statement stmts = 1;
}

message RepeatStatement {
  repeated Statement stmts = 1;
  Expression cond = 2;
}

message ForStatement {
  Expression ctlVar = 1;
  Expression initValue = 2;
  Expression finalValue = 3;
  Statement body = 4;
  TokenKind dir = 5;
}

message Statement {
  enum StmtKind {
    if = 0;
    assign = 1;
    procedure = 2;
    return = 3;
    while = 4;
    compound = 5;
    repeat = 6;
    for = 7;
  }

  StmtKind kind = 1;
  oneof stmt {
    AssignStatement assignStmt = 2;
    ProcedureStatement procStmt = 3;
    IfStatement ifStmt = 4;
    ReturnStatement retStmt = 5;
    WhileStatement whileStmt = 6;
    CompoundStatement cmpdStmt = 7;
    RepeatStatement rptStmt = 8;
    ForStatement forStmt = 9;
  }
}